package DesignPattern.Proxy;

/**
 * 意图：为其他对象提供一种代理以控制对这个对象的访问。
 * 主要解决：在直接访问对象时带来的问题，
 * 比如说：要访问的对象在远程的机器上。
 * 在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），
 * 直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
 * <p>
 * 何时使用：想在访问一个类时做一些控制。
 * <p>
 * 如何解决：增加中间层。
 * <p>
 * 关键代码：实现与被代理类组合。
 * 优点： 1、职责清晰。 2、高扩展性。 3、智能化。
 * <p>
 * 缺点：
 * 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。
 * 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。
 * 注意事项：
 * 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
 * 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。
 *
 * 代理模式的主要角色如下。
 * 抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。
 * 真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。
 * 代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。
 */
public class ProxyMain {
    public static void main(String[] args) {
        //比如今天12306买票不方便，我只能去代售点买，那么代售点需要持有12306的引用，最终还是调用的12306接口
        TicketProxy ticketProxy = new TicketProxy(new _12306Ticket());
        ticketProxy.buy();
    }
}
